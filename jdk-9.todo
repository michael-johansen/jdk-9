JDK 9:

Agenda: 
☐ Jshell
☐ HTTP2
☐ Jigsaw

☐ Timeline (http://openjdk.java.net/projects/jdk9/):  
    2016/05/26		Feature Complete
    2016/12/22		Feature Extension Complete
    2017/01/05		Rampdown Start
    2017/02/09		All Tests Run
    2017/02/16		Zero Bug Bounce
    2017/03/16		Rampdown Phase 2
    2017/07/06		Final Release Candidate
    2017/07/27		General Availability

☐ Content (http://openjdk.java.net/projects/jdk9/)
    JEPs targeted to JDK 9, so far

    102: Process API Updates
    ++110: HTTP 2 Client
    143: Improve Contended Locking
    158: Unified JVM Logging
    165: Compiler Control
    193: Variable Handles
    197: Segmented Code Cache
    199: Smart Java Compilation, Phase Two
    ++200: The Modular JDK
    201: Modular Source Code
    211: Elide Deprecation Warnings on Import Statements
    212: Resolve Lint and Doclint Warnings
    213: Milling Project Coin
    214: Remove GC Combinations Deprecated in JDK 8
    215: Tiered Attribution for javac
    216: Process Import Statements Correctly
    217: Annotations Pipeline 2.0
    219: Datagram Transport Layer Security (DTLS)
    220: Modular Run-Time Images
    221: Simplified Doclet API
    ++222: jshell: The Java Shell (Read-Eval-Print Loop)
    223: New Version-String Scheme
    224: HTML5 Javadoc
    225: Javadoc Search
    226: UTF-8 Property Files
    227: Unicode 7.0
    228: Add More Diagnostic Commands
    229: Create PKCS12 Keystores by Default
    231: Remove Launch-Time JRE Version Selection
    232: Improve Secure Application Performance
    233: Generate Run-Time Compiler Tests Automatically
    235: Test Class-File Attributes Generated by javac
    236: Parser API for Nashorn
    237: Linux/AArch64 Port
    238: Multi-Release JAR Files
    240: Remove the JVM TI hprof Agent
    241: Remove the jhat Tool
    243: Java-Level JVM Compiler Interface
    244: TLS Application-Layer Protocol Negotiatio
    .request(URI.create("https://www.exxcellent.de"))
    .GET()
    .responseAsync() // CompletableFuture :D
    .thenAccept(httpResponse ->n Extension
    245: Validate JVM Command-Line Flag Arguments
    246: Leverage CPU Instructions for GHASH and RSA
    247: Compile for Older Platform Versions
    248: Make G1 the Default Garbage Collector
    249: OCSP Stapling for TLS
    250: Store Interned Strings in CDS Archives
    251: Multi-Resolution Images
    252: Use CLDR Locale Data by Default
    253: Prepare JavaFX UI Controls & CSS APIs for Modularization
    254: Compact Strings
    255: Merge Selected Xerces 2.11.0 Updates into JAXP
    256: BeanInfo Annotations
    257: Update JavaFX/Media to Newer Version of GStreamer
    258: HarfBuzz Font-Layout Engine
    259: Stack-Walking API
    260: Encapsulate Most Internal APIs
    ++261: Module System
    262: TIFF Image I/O
    263: HiDPI Graphics on Windows and Linux
    264: Platform Logging API and Service
    265: Marlin Graphics Renderer
    266: More Concurrency Updates
    267: Unicode 8.0
    268: XML Catalogs
    269: Convenience Factory Methods for Collections
    270: Reserved Stack Areas for Critical Sections
    271: Unified GC Logging
    272: Platform-Specific Desktop Features
    273: DRBG-Based SecureRandom Implementations
    274: Enhanced Method Handles
    275: Modular Java Application Packaging
    276: Dynamic Linking of Language-Defined Object Models
    277: Enhanced Deprecation
    278: Additional Tests for Humongous Objects in G1
    279: Improve Test-Failure Troubleshooting
    280: Indify String Concatenation
    281: HotSpot C++ Unit-Test Framework
    282: jlink: The Java Linker
    283: Enable GTK 3 on Linux
    284: New HotSpot Build System
    285: Spin-Wait Hints
    287: SHA-3 Hash Algorithms
    288: Disable SHA-1 Certificates
    289: Deprecate the Applet API
    290: Filter Incoming Serialization Data
    292: Implement Selected ECMAScript 6 Features in Nashorn
    294: Linux/s390x Port
    295: Ahead-of-Time Compilation
    297: Unified arm32/arm64 Port
☐ Cut because of lack of funding from Oracle
  ☐ A standardized lightweight JSON API
  ☐ Money and Currency API

☐ Jigsaw
    ☐ Problems in Java < 9
        ☐ Large jars
        ☐ No clear dependencies in the platform
        ☐ No clear dependencies in libraries
            classpath conflicts
            classpath is not a very fine grained tool (present, or not)
        ☐ public is too open
            sun, hotspot-apis, unsafe
        ☐ private is too open
            reflection
        ☐ jar has packages has classes
    ☐ Jdk split into jmods
        ☐ java.base is implicitly required
        ☐ https://blog.codecentric.de/files/2015/11/jdk-tr1.png
        ☐ show jdk-modules
    ☐ Demo
    ☐ new abstraction: module
        ☐ jar has module has packages has classes
        ☐ module-info.java
            notice how it deviates from the java bean naming conventions
        ☐ module not a strict keyword
            is contextual, can still be used as an identifier
    ☐ Defining modules
        ☐ requires
            The requires statement takes a qualified identifier indicating the name of a module on which the current module has a dependence.
            you depend on modules
            ☐ transitive (previously named public)
                also export this dependency to your clients
        ☐ exports
            The exports statement takes a qualified identifier indicating the name of a package to be exported from the current module. This makes public and protected types in the package, and their public and protected members, be accessible to code in other modules.
            you export packages
        ☐ using
            The uses statement in a module declaration specifies a service interface which the current module may discover via java.util.ServiceLoader.
        ☐ provides ... with ...
            The provides statement specifies a service interface for which the with clause specifies one possible service implementation to java.util.ServiceLoader.
    ☐ How to build and run:
        ☐ javac
            set module path instead of class path
            output to mods
            build
        ☐ jar
            from mods
            output to mlib
            package
        ☐ java
            set module path instead of class path
            run
    ☐ Tools:
        ☐ jdeps -s --module-path mlib/ mlib/*.jar
            see module dependencies
            ☐ jdeps --generate-module-info destinatin/ path/to/non-module.jar
                Junit:
                module junit {
                    requires transitive java.desktop;
                    exports junit.awtui;
                    exports junit.extensions;
                    exports junit.framework;
                    exports junit.runner;
                    exports junit.swingui;
                    exports junit.swingui.icons;
                    exports junit.textui;
                }
        ☐ java --list-modules
            looking for java modules?
        ☐ jlink
            custom targeted java executables with only required modules
            link
    ☐ References:
        The State of the Module System http://openjdk.java.net/projects/jigsaw/spec/sotms/
    ☐ Inaccessible api?:
        java --add-exports jdk.jvmstat/sun.jvmstat.monitor=ALL-UNNAMED MyClass

☐ Jshell
    ☐ REPL (ReadEvalPrintLoop)
        ☐ tab: autocomplete
        ☐ TAB: signature
        ☐ TAB+TAB: javadoc
        ☐ /help
        ☐ /imports
        ☐ /history
            ☐ /!  # last
            ☐ /-2 # second to last
            ☐ /1  # 1st history item
        ☐ /variables
        ☐ /methods
        ☐ /types
        ☐ /edit 1 # Edit source 1 in EDITOR
        ☐ /save [-all|-history|-start] <file>
        ☐ /open <file>
        ☐ /env [-class-path <path>] [-module-path <path>] [-add-modules <modules>]
            Modify application class/module path or add modules
    ☐ Programmatic use
        JShell shell = JShell.create();
        List<SnippetEvent> events = shell.eval("int i = 10;");
    ☐ Or completely meta
        List<SnippetEvent> events = shell.eval("jdk.jshell.JShell.create();");

☐ HttpClient
    ☐ Why create new client api?
        ☐ HTTP2 support
        ☐ Old api as old as the URI-specification
        ☐ Old api built to handle other protocols
        ☐ Maintaining backwards compatibility would have made the support for HTTP2 awkward
    ☐ Show net.michaeljohansen.http
    ☐ In Jshell: (2 first statements will most likely change before the final release)
        jshell --add-modules jdk.incubator.httpclient
        import jdk.incubator.http.*;
        HttpClient.newBuilder()
            .followRedirects(HttpClient.Redirect.ALWAYS)
            .build()
            .send(
                HttpRequest.newBuilder(new URI("https://google.com")).GET().build(),
                HttpResponse.BodyHandler.asString()
            ).body();

☐ Documentation
    Docs: http://docs.oracle.com/javase/9/
    API: http://download.java.net/java/jdk9/docs/api/overview-summary.html

☐ Workshop
